# Advanced GitHub Actions Workflow for ESP32-C3 Bluetooth Headset

name: Build and Release Firmware

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [esp32-c3-supermini]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
        pio upgrade --dev
        pio pkg update
    
    - name: Show PlatformIO version
      run: pio --version
    
    - name: Install project dependencies
      run: |
        pio pkg install
        pio lib install
    
    - name: Build firmware
      run: |
        echo "Building firmware for ${{ matrix.environment }}"
        pio run -e ${{ matrix.environment }} --verbose
        
    - name: Show build results
      run: |
        echo "Build completed successfully!"
        ls -la .pio/build/${{ matrix.environment }}/
        
    - name: Create firmware info
      run: |
        echo "Firmware built on: $(date)" > firmware_info.txt
        echo "Environment: ${{ matrix.environment }}" >> firmware_info.txt
        echo "Git commit: ${{ github.sha }}" >> firmware_info.txt
        echo "Git ref: ${{ github.ref }}" >> firmware_info.txt
        if [ -f .pio/build/${{ matrix.environment }}/firmware.bin ]; then
          echo "Firmware size: $(stat -c%s .pio/build/${{ matrix.environment }}/firmware.bin) bytes" >> firmware_info.txt
        fi
        
    - name: Prepare firmware artifacts
      run: |
        mkdir -p firmware-release
        if [ -f .pio/build/${{ matrix.environment }}/firmware.bin ]; then
          cp .pio/build/${{ matrix.environment }}/firmware.bin firmware-release/esp32-c3-bluetooth-headset.bin
        fi
        if [ -f .pio/build/${{ matrix.environment }}/firmware.elf ]; then
          cp .pio/build/${{ matrix.environment }}/firmware.elf firmware-release/esp32-c3-bluetooth-headset.elf
        fi
        if [ -f .pio/build/${{ matrix.environment }}/partitions.bin ]; then
          cp .pio/build/${{ matrix.environment }}/partitions.bin firmware-release/
        fi
        if [ -f .pio/build/${{ matrix.environment }}/bootloader.bin ]; then
          cp .pio/build/${{ matrix.environment }}/bootloader.bin firmware-release/
        fi
        cp firmware_info.txt firmware-release/
        
    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.environment }}-${{ github.sha }}
        path: firmware-release/
        retention-days: 30
        
    - name: Run tests (if available)
      run: |
        echo "Running tests..."
        pio test -e ${{ matrix.environment }} --verbose || echo "Tests not available or failed"
      continue-on-error: true
    
    - name: Check code formatting
      run: |
        echo "Checking code style..."
        sudo apt-get update
        sudo apt-get install -y clang-format
        find src/ lib/ -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror || echo "Code style check failed"
      continue-on-error: true

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all firmware artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "*.bin" -exec cp {} release-assets/ \;
        find ./artifacts -name "*.elf" -exec cp {} release-assets/ \;
        find ./artifacts -name "firmware_info.txt" -exec cp {} release-assets/ \;
        
        # Create a comprehensive release package
        cd release-assets
        zip -r ../esp32-c3-bluetooth-headset-firmware-${{ github.ref_name }}.zip .
        cd ..
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          esp32-c3-bluetooth-headset-firmware-${{ github.ref_name }}.zip
          release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true
        body: |
          ## ESP32-C3 SuperMini Bluetooth Headset Firmware
          
          ### üöÄ Installation
          
          1. **Download the firmware**: Get `esp32-c3-bluetooth-headset.bin` from the assets below
          2. **Flash to ESP32-C3**: Use the following command:
             ```bash
             esptool.py --chip esp32c3 --port COM_PORT write_flash 0x0000 esp32-c3-bluetooth-headset.bin
             ```
          3. **Or use PlatformIO**: 
             ```bash
             pio run --target upload
             ```
          
          ### üìã What's Included
          
          - `esp32-c3-bluetooth-headset.bin` - Main firmware binary
          - `esp32-c3-bluetooth-headset.elf` - ELF file for debugging
          - `firmware_info.txt` - Build information
          - `partitions.bin` - Partition table (if applicable)
          - `bootloader.bin` - Bootloader (if applicable)
          
          ### üîß Hardware Requirements
          
          - ESP32-C3 SuperMini
          - QCC5124 A2DP Codec
          - SSD1306 OLED Display
          - 4 Push Buttons
          - TP4056 Battery Charger
          
          ### üìù Changes
          
          See the changelog for detailed changes in this release.
          
          ### üêõ Known Issues
          
          - Check the [Issues](https://github.com/${{ github.repository }}/issues) page for current known issues
          
          ### üìû Support
          
          - [Documentation](https://github.com/${{ github.repository }}/wiki)
          - [Issues](https://github.com/${{ github.repository }}/issues)
          - [Discussions](https://github.com/${{ github.repository }}/discussions)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job to create nightly builds
  nightly:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    
    steps:
    - name: Download firmware artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare nightly release
      run: |
        mkdir -p nightly-assets
        find ./artifacts -name "*.bin" -exec cp {} nightly-assets/ \;
        find ./artifacts -name "firmware_info.txt" -exec cp {} nightly-assets/ \;
        
        # Rename for nightly
        cd nightly-assets
        if [ -f esp32-c3-bluetooth-headset.bin ]; then
          mv esp32-c3-bluetooth-headset.bin esp32-c3-bluetooth-headset-nightly.bin
        fi
        cd ..
        
    - name: Update nightly release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: nightly
        name: "Nightly Build"
        files: nightly-assets/*
        draft: false
        prerelease: true
        body: |
          ## Nightly Build - ESP32-C3 Bluetooth Headset
          
          **‚ö†Ô∏è This is a nightly build - Use at your own risk!**
          
          Built from commit: ${{ github.sha }}
          Build date: $(date)
          
          ### Installation
          ```bash
          esptool.py --chip esp32c3 --port COM_PORT write_flash 0x0000 esp32-c3-bluetooth-headset-nightly.bin
          ```
          
          ### What's New
          - Latest changes from the main branch
          - May contain experimental features
          - Not recommended for production use
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
